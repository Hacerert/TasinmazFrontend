import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { LogService } from '../services/log.service';
import { UserService } from '../services/user.service';
import { Subscription, forkJoin } from 'rxjs';
import { DatePipe } from '@angular/common';
import * as XLSX from 'xlsx';
import { finalize } from 'rxjs/operators';

export interface Log {
  id: number;
  status: string;
  actionType: string;
  description: string;
  createdAt: Date | null;
  ipAddress: string;
  userId?: number;
  user?: {
    id: number;
    userName: string;
    email: string;
    role: string;
  };
}

@Component({
  selector: 'app-log-list',
  templateUrl: './log-list.component.html',
  styleUrls: ['./log-list.component.css'],
  providers: [DatePipe]
})
export class LogListComponent implements OnInit, OnDestroy {
  logs: Log[] = [];
  filteredLogs: Log[] = [];
  isLoading = true;
  error: string | null = null;
  private dataSubscription: Subscription | undefined;
  allUsers: any[] = [];

  // FÄ°LTRELEME DEÄžÄ°ÅžKENLERÄ°
  filterUserId: string = '';
  filterStatus: string = '';
  filterActionType: string = '';
  filterIpAddress: string = '';
  filterStartDate: string = '';
  filterEndDate: string = '';

  // Filtre seÃ§enekleri iÃ§in diziler
  availableStatuses: string[] = [];
  availableActionTypes: string[] = [];

  // Sayfalama DeÄŸiÅŸkenleri
  currentPage: number = 1;
  itemsPerPage: number = 8; // Her sayfada gÃ¶sterilecek kayÄ±t sayÄ±sÄ±

  constructor(
    private logService: LogService,
    private userService: UserService,
    private router: Router,
    private datePipe: DatePipe
  ) {}

  ngOnInit(): void {
    this.loadAllData();
  }

  ngOnDestroy(): void {
    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }
  }

  loadAllData(): void {
    this.isLoading = true;
    this.error = null;

    this.dataSubscription = forkJoin({
      logsData: this.logService.getLogs(),
      usersData: this.userService.getAllUsers()
    }).pipe(
      finalize(() => this.isLoading = false)
    ).subscribe({
      next: (results) => {
        this.allUsers = results.usersData;
        console.log('KullanÄ±cÄ±lar yÃ¼klendi:', this.allUsers);

        this.logs = results.logsData.map((log: any) => {
          let parsedDate: Date | null = null;
          if (log.createdAt) {
            const tempDate = new Date(log.createdAt);
            if (!isNaN(tempDate.getTime())) {
              parsedDate = tempDate;
            } else {
              console.warn('GeÃ§ersiz createdAt formatÄ± algÄ±landÄ±, log ID:', log.id, 'DeÄŸer:', log.createdAt);
            }
          }
          return {
            id: log.id,
            status: log.status,
            actionType: log.actionType,
            description: log.description,
            createdAt: parsedDate,
            ipAddress: log.ipAddress,
            userId: log.userId,
            user: log.user
          } as Log;
        });
        console.log('Loglar yÃ¼klendi ve createdAt dÃ¶nÃ¼ÅŸtÃ¼rÃ¼ldÃ¼:', this.logs);

        this.mapUserNamesToLogs();
        this.populateFilterOptions(); // Filtre seÃ§eneklerini doldur
        this.applyFilters(); // Ä°lk yÃ¼klemede filtreleri uygula
      },
      error: (err) => {
        console.error('Veri yÃ¼klenirken hata oluÅŸtu:', err);
        this.error = 'Veriler yÃ¼klenirken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.';
      }
    });
  }

  mapUserNamesToLogs(): void {
    if (this.logs.length > 0 && this.allUsers.length > 0) {
      this.logs = this.logs.map(log => {
        const user = this.allUsers.find(u => u.id === log.userId);
        return {
          ...log,
          user: user ? { id: user.id, userName: user.userName || user.email, email: user.email, role: user.role } : undefined
        };
      });
      console.log('Loglara kullanÄ±cÄ± isimleri eÅŸleÅŸtirildi:', this.logs);
    }
  }

  populateFilterOptions(): void {
    // TÃ¼m olasÄ± durumlarÄ± ve iÅŸlem tÃ¼rlerini manuel olarak tanÄ±mlayalÄ±m ve sonra sÄ±ralayalÄ±m.
    // Bu, backend'den hiÃ§ gelmese bile filtrede gÃ¶rÃ¼nmelerini saÄŸlar.
    const fixedStatuses = ['BaÅŸarÄ±lÄ±', 'BaÅŸarÄ±sÄ±z', 'UyarÄ±', 'Bilgi'];
    const fixedActionTypes = [
      'GiriÅŸ', 'Ã‡Ä±kÄ±ÅŸ', 'Ekleme', 'GÃ¼ncelleme', 'Silme', 'GÃ¶rÃ¼ntÃ¼leme',
      'TaÅŸÄ±nmaz Ekleme', 'TaÅŸÄ±nmaz GÃ¼ncelleme', 'TaÅŸÄ±nmaz Silme',
      'KullanÄ±cÄ± Ekleme', 'KullanÄ±cÄ± GÃ¼ncelleme', 'KullanÄ±cÄ± Silme', 'KullanÄ±cÄ± YÃ¶netimi'
    ];

    // Loglardan gelen benzersiz deÄŸerleri de ekleyelim (eÄŸer farklÄ± bir ÅŸey gelirse)
    const allStatuses = new Set([...fixedStatuses, ...this.logs.map(log => log.status).filter(s => s)]);
    const allActionTypes = new Set([...fixedActionTypes, ...this.logs.map(log => log.actionType).filter(a => a)]);

    this.availableStatuses = Array.from(allStatuses).sort();
    this.availableActionTypes = Array.from(allActionTypes).sort();

    console.log('Mevcut Durumlar (KesinleÅŸtirilmiÅŸ):', this.availableStatuses);
    console.log('Mevcut Ä°ÅŸlem TÃ¼rleri (KesinleÅŸtirilmiÅŸ):', this.availableActionTypes);
  }

  applyFilters(): void {
    console.log('applyFilters() Ã§aÄŸrÄ±ldÄ±.');
    console.log('Aktif filtre deÄŸerleri:', {
      userId: this.filterUserId,
      status: this.filterStatus,
      actionType: this.filterActionType,
      ipAddress: this.filterIpAddress,
      startDate: this.filterStartDate,
      endDate: this.filterEndDate
    });

    let tempLogs = [...this.logs]; // Her zaman orijinal log listesinden baÅŸla

    // KullanÄ±cÄ± ID Filtresi
    if (this.filterUserId) {
      tempLogs = tempLogs.filter(log =>
        log.userId && log.userId.toString().toLowerCase().includes(this.filterUserId.toLowerCase())
      );
      console.log('KullanÄ±cÄ± ID filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    // Durum Filtresi
    if (this.filterStatus) {
      tempLogs = tempLogs.filter(log =>
        log.status && log.status.toLowerCase() === this.filterStatus.toLowerCase()
      );
      console.log('Durum filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    // Ä°ÅŸlem TÃ¼rÃ¼ Filtresi
    if (this.filterActionType) {
      tempLogs = tempLogs.filter(log =>
        log.actionType && log.actionType.toLowerCase().includes(this.filterActionType.toLowerCase())
      );
      console.log('Ä°ÅŸlem TÃ¼rÃ¼ filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    // IP Adresi Filtresi
    if (this.filterIpAddress) {
      tempLogs = tempLogs.filter(log =>
        log.ipAddress && log.ipAddress.toLowerCase().includes(this.filterIpAddress.toLowerCase())
      );
      console.log('IP Adresi filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    // BaÅŸlangÄ±Ã§ Tarihi Filtresi
    if (this.filterStartDate) {
      const startDate = new Date(this.filterStartDate);
      startDate.setHours(0, 0, 0, 0); // GÃ¼nÃ¼n baÅŸlangÄ±cÄ±nÄ± ayarla
      tempLogs = tempLogs.filter(log => {
        return log.createdAt && log.createdAt instanceof Date && log.createdAt >= startDate;
      });
      console.log('BaÅŸlangÄ±Ã§ Tarihi filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    // BitiÅŸ Tarihi Filtresi
    if (this.filterEndDate) {
      const endDate = new Date(this.filterEndDate);
      endDate.setHours(23, 59, 59, 999); // GÃ¼nÃ¼n sonunu ayarla
      tempLogs = tempLogs.filter(log => {
        return log.createdAt && log.createdAt instanceof Date && log.createdAt <= endDate;
      });
      console.log('BitiÅŸ Tarihi filtresi uygulandÄ±. Kalan log sayÄ±sÄ±:', tempLogs.length);
    }

    this.filteredLogs = tempLogs;
    console.log('Filtreleme iÅŸlemi tamamlandÄ±. Son filtrelenmiÅŸ log sayÄ±sÄ±:', this.filteredLogs.length);
    this.currentPage = 1; // Filtreler uygulandÄ±ÄŸÄ±nda sayfayÄ± sÄ±fÄ±rla
  }

  clearFilters(): void {
    this.filterUserId = '';
    this.filterStatus = '';
    this.filterActionType = '';
    this.filterIpAddress = '';
    this.filterStartDate = '';
    this.filterEndDate = '';
    this.applyFilters(); // Filtreleri temizledikten sonra yeniden uygula
    console.log('Filtreler temizlendi.');
  }

  exportToExcel(): void {
    console.log('ðŸ“Š Excel export baÅŸlatÄ±lÄ±yor...');

    if (this.filteredLogs.length === 0) {
      console.warn('AktarÄ±lacak log kaydÄ± bulunmamaktadÄ±r.');
      return;
    }

    const data = this.filteredLogs.map((log, index) => ({
      'SÄ±ra No': index + 1,
      'Log ID': log.id,
      'KullanÄ±cÄ± ID': log.userId || '-',
      'KullanÄ±cÄ± AdÄ±': log.user?.userName || 'Bilinmiyor',
      'Email': log.user?.email || '-',
      'Rol': log.user?.role || '-',
      'Durum': log.status,
      'Ä°ÅŸlem TÃ¼rÃ¼': log.actionType,
      'AÃ§Ä±klama': log.description,
      'Tarih': log.createdAt ? this.datePipe.transform(log.createdAt, 'dd/MM/yyyy') : '-',
      'Saat': log.createdAt ? this.datePipe.transform(log.createdAt, 'HH:mm:ss') : '-',
      'IP Adresi': log.ipAddress
    }));

    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);

    // SÃ¼tun geniÅŸliklerini daha makul deÄŸerlere ayarladÄ±m
    const columnWidths = [
      { wch: 8 },   // SÄ±ra No
      { wch: 8 },   // Log ID
      { wch: 12 },  // KullanÄ±cÄ± ID
      { wch: 20 },  // KullanÄ±cÄ± AdÄ± (daha geniÅŸ)
      { wch: 30 },  // Email (daha geniÅŸ)
      { wch: 10 },  // Rol
      { wch: 15 },  // Durum
      { wch: 20 },  // Ä°ÅŸlem TÃ¼rÃ¼
      { wch: 50 },  // AÃ§Ä±klama (daha da geniÅŸ)
      { wch: 12 },  // Tarih
      { wch: 10 },  // Saat
      { wch: 18 }   // IP (biraz daha geniÅŸ)
    ];
    ws['!cols'] = columnWidths;

    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Log KayÄ±tlarÄ±');

    const simdi = new Date();
    const tarih = this.datePipe.transform(simdi, 'dd-MM-yyyy');
    const saat = this.datePipe.transform(simdi, 'HH-mm-ss');
    const dosyaAdi = `Log_Kayitlari_${tarih}_${saat}.xlsx`;

    XLSX.writeFile(wb, dosyaAdi);

    console.log(`âœ… Excel dosyasÄ± indirildi: ${dosyaAdi}`);
  }

  goBack(): void {
    this.router.navigate(['/admin-dashboard']);
  }

  getStatusClass(status: string): string {
    switch (status.toLowerCase()) {
      case 'baÅŸarÄ±lÄ±':
      case 'success':
        return 'bg-green-200 text-green-800';
      case 'baÅŸarÄ±sÄ±z':
      case 'error':
      case 'failed':
        return 'bg-red-200 text-red-800';
      case 'uyarÄ±':
      case 'warning':
        return 'bg-yellow-200 text-yellow-800';
      case 'bilgi':
      case 'info':
        return 'bg-blue-200 text-blue-800';
      default:
        return 'bg-gray-200 text-gray-800';
    }
  }

  getActionClass(actionType: string): string {
    switch (actionType.toLowerCase()) {
      case 'giriÅŸ':
      case 'login':
        return 'bg-green-100 text-green-800';
      case 'Ã§Ä±kÄ±ÅŸ':
      case 'logout':
        return 'bg-blue-100 text-blue-800';
      case 'taÅŸÄ±nmaz ekleme':
      case 'taÅŸÄ±nmaz gÃ¼ncelleme':
      case 'ekleme':
      case 'gÃ¼ncelleme':
        return 'bg-purple-100 text-purple-800';
      case 'taÅŸÄ±nmaz silme':
      case 'kullanÄ±cÄ± silme':
      case 'silme':
        return 'bg-red-100 text-red-800';
      case 'kullanÄ±cÄ± yÃ¶netimi':
      case 'kullanÄ±cÄ± ekleme':
        return 'bg-yellow-100 text-yellow-800';
      default:
        return 'bg-indigo-100 text-indigo-800';
    }
  }

  // Sayfalama iÃ§in getter'lar ve metodlar
  get totalPages(): number {
    return Math.ceil(this.filteredLogs.length / this.itemsPerPage);
  }

  get paginatedLogs(): Log[] {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    return this.filteredLogs.slice(startIndex, endIndex);
  }

  goToPage(page: number): void {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
    }
  }

  getPagesArray(): number[] {
    const pages = [];
    for (let i = 1; i <= this.totalPages; i++) {
      pages.push(i);
    }
    return pages;
  }
}
